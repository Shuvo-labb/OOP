/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hospitalmanagementsystem;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

public class Registerstaffandpatients extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Registerstaffandpatients.class.getName());

    /**
     * Creates new form Registerstaffandpatients
     */
    public Registerstaffandpatients() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Additem = new javax.swing.JButton();
        EditRecords = new javax.swing.JButton();
        DeleteRecords = new javax.swing.JButton();
        UpdateRecords = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtitems = new javax.swing.JTextField();
        DoctorRecords = new javax.swing.JComboBox<>();
        NurseRecords = new javax.swing.JComboBox<>();
        PatientRecords = new javax.swing.JComboBox<>();
        txtNewItem = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 102, 102));

        jPanel2.setBackground(new java.awt.Color(255, 255, 102));

        Additem.setText("Add ");
        Additem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdditemActionPerformed(evt);
            }
        });

        EditRecords.setText("Edit");
        EditRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRecordsActionPerformed(evt);
            }
        });

        DeleteRecords.setText("Delete");
        DeleteRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRecordsActionPerformed(evt);
            }
        });

        UpdateRecords.setText("Update");
        UpdateRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateRecordsActionPerformed(evt);
            }
        });

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        jLabel1.setText("Doctor Records");

        jLabel2.setText("Nurse Records");

        jLabel3.setText("Patient Records");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(Additem)
                                .addGap(35, 35, 35)
                                .addComponent(EditRecords))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(PatientRecords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(NurseRecords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(45, 45, 45)
                                        .addComponent(DoctorRecords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addComponent(DeleteRecords)
                        .addGap(36, 36, 36)
                        .addComponent(UpdateRecords)
                        .addGap(27, 27, 27)
                        .addComponent(btnReturn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(txtitems, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(txtNewItem, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(DoctorRecords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(NurseRecords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(PatientRecords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtitems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Additem)
                    .addComponent(EditRecords)
                    .addComponent(DeleteRecords)
                    .addComponent(UpdateRecords)
                    .addComponent(btnReturn))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AdditemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdditemActionPerformed
        DoctorRecords.addItem(txtitems.getText());
        NurseRecords.addItem(txtitems.getText());
        PatientRecords.addItem(txtitems.getText());
        
    String name = txtitems.getText().trim();           // e.g., "Dr. Smith"

    if (name.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a name.");
        return;
    }

    try (PrintWriter writer = new PrintWriter(new FileWriter("RegisterStaffAndPatients.txt", true))) {
        writer.println(name);
        JOptionPane.showMessageDialog(null, "Record added.");
        txtitems.setText(""); // clear input
        System.out.println("Data Written Successfully");
      
    } catch (IOException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_AdditemActionPerformed

    private void EditRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditRecordsActionPerformed
        String newText = txtitems.getText();

    int docIndex = DoctorRecords.getSelectedIndex();
    if (docIndex != -1) {
        DoctorRecords.insertItemAt(newText, docIndex);
        DoctorRecords.removeItemAt(docIndex + 1);
       }

    int nurseIndex = NurseRecords.getSelectedIndex();
    if (nurseIndex != -1) {
        NurseRecords.insertItemAt(newText, nurseIndex);
        NurseRecords.removeItemAt(nurseIndex + 1);
       }

    int patientIndex = PatientRecords.getSelectedIndex();
    if (patientIndex != -1) {
        PatientRecords.insertItemAt(newText, patientIndex);
        PatientRecords.removeItemAt(patientIndex + 1);
       }
    
    String oldName = txtitems.getText().trim();           // e.g., "Dr. Smith"
    String newName = txtNewItem.getText().trim();         // e.g., "Dr. John"

    if (oldName.isEmpty() || newName.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter both old and new names.");
        return;
    }

    List<String> updatedLines = new ArrayList<>();

    try (BufferedReader reader = new BufferedReader(new FileReader("RegisterStaffAndPatients.txt"))) {
        String line;
        boolean found = false;

        while ((line = reader.readLine()) != null) {
            if (line.equalsIgnoreCase(oldName)) {
                updatedLines.add(newName);  // replace line
                found = true;
            } else {
                updatedLines.add(line);  // keep as-is
            }
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "Record not found to update.");
            return;
        }
        

    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error reading the file.");
        return;
    }

    // Write back to the file with updated content
    try (PrintWriter writer = new PrintWriter(new FileWriter("RegisterStaffAndPatients.txt"))) {
        for (String updatedLine : updatedLines) {
            writer.println(updatedLine);
        }
        JOptionPane.showMessageDialog(null, "Record updated successfully.");
        txtitems.setText("");
        txtNewItem.setText("");
        System.out.println("Update Data Written Successfully");
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error writing to the file.");
      }
    }//GEN-LAST:event_EditRecordsActionPerformed

    private void DeleteRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRecordsActionPerformed
       // Remove selected item from DoctorRecords
      String itemToDelete = txtitems.getText();

    DoctorRecords.removeItem(itemToDelete);
    NurseRecords.removeItem(itemToDelete);
    PatientRecords.removeItem(itemToDelete);
    
    String name = txtitems.getText().trim();

    if (name.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a name to delete.");
        return;
    }

    List<String> lines = new ArrayList<>();

    try (BufferedReader reader = new BufferedReader(new FileReader("RegisterStaffAndPatients.txt"))) {
        String line;
        while ((line = reader.readLine()) != null) {
            if (!line.equalsIgnoreCase(name)) {
                lines.add(line);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    try (PrintWriter writer = new PrintWriter(new FileWriter("RegisterStaffAndPatients.txt"))) {
        for (String line : lines) {
            writer.println(line);
        }
        JOptionPane.showMessageDialog(null, "Record deleted (if it existed).");
        txtitems.setText("");
        System.out.println("Delete Written Successfully");
    } catch (IOException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_DeleteRecordsActionPerformed

    private void UpdateRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateRecordsActionPerformed
      
        String newItem = txtitems.getText();  
     // Update selected item in DoctorRecords
    int docIndex = DoctorRecords.getSelectedIndex();
    if (docIndex != -1) {
        DoctorRecords.insertItemAt(newItem, docIndex);
        DoctorRecords.removeItemAt(docIndex + 1);
     }

    // Update selected item in NurseRecords
    int nurseIndex = NurseRecords.getSelectedIndex();
    if (nurseIndex != -1) {
        NurseRecords.insertItemAt(newItem, nurseIndex);
        NurseRecords.removeItemAt(nurseIndex + 1);
     }

    // Update selected item in PatientRecords
    int patientIndex = PatientRecords.getSelectedIndex();
    if (patientIndex != -1) {
        PatientRecords.insertItemAt(newItem, patientIndex);
        PatientRecords.removeItemAt(patientIndex + 1);
     }
    
    String oldName = txtitems.getText().trim();
    String newName = txtNewItem.getText().trim();

    if (oldName.isEmpty() || newName.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Enter both old and new names.");
        return;
    }

    List<String> lines = new ArrayList<>();

    try (BufferedReader reader = new BufferedReader(new FileReader("RegisterStaffAndPatients.txt"))) {
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.equalsIgnoreCase(oldName)) {
                lines.add(newName);
            } else {
                lines.add(line);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    try (PrintWriter writer = new PrintWriter(new FileWriter("RegisterStaffAndPatients.txt"))) {
        for (String line : lines) {
            writer.println(line);
        }
        JOptionPane.showMessageDialog(null, "Record updated (if it existed).");
        txtitems.setText("");
        txtNewItem.setText("");
    } catch (IOException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_UpdateRecordsActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        AdminDashboard admin = new AdminDashboard(); // Create a new dashboard window
        admin.setVisible(true);                      // Show it
        this.dispose();                              // Close the current window
    }//GEN-LAST:event_btnReturnActionPerformed
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Registerstaffandpatients().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Additem;
    private javax.swing.JButton DeleteRecords;
    private javax.swing.JComboBox<String> DoctorRecords;
    private javax.swing.JButton EditRecords;
    private javax.swing.JComboBox<String> NurseRecords;
    private javax.swing.JComboBox<String> PatientRecords;
    private javax.swing.JButton UpdateRecords;
    private javax.swing.JButton btnReturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtNewItem;
    private javax.swing.JTextField txtitems;
    // End of variables declaration//GEN-END:variables
}
